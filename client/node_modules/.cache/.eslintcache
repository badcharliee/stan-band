[{"/Users/charliewilson/personal/stan-band/client/src/index.js":"1","/Users/charliewilson/personal/stan-band/client/src/components/App.js":"2","/Users/charliewilson/personal/stan-band/client/src/reducers/index.js":"3","/Users/charliewilson/personal/stan-band/client/src/components/Header.js":"4","/Users/charliewilson/personal/stan-band/client/src/components/bands/Home.js":"5","/Users/charliewilson/personal/stan-band/client/src/components/bands/BandList.js":"6","/Users/charliewilson/personal/stan-band/client/src/components/bands/NewBandList.js":"7","/Users/charliewilson/personal/stan-band/client/src/components/bands/Band.js":"8","/Users/charliewilson/personal/stan-band/client/src/components/bands/Stan.js":"9","/Users/charliewilson/personal/stan-band/client/src/components/bands/SpotifyCallback.js":"10","/Users/charliewilson/personal/stan-band/client/src/components/TopBands.js":"11","/Users/charliewilson/personal/stan-band/client/src/actions/types.js":"12","/Users/charliewilson/personal/stan-band/client/src/actions/index.js":"13","/Users/charliewilson/personal/stan-band/client/src/components/BandCard.js":"14","/Users/charliewilson/personal/stan-band/client/src/apis/spotify.js":"15","/Users/charliewilson/personal/stan-band/client/src/apis/bands.js":"16","/Users/charliewilson/personal/stan-band/client/src/apis/users.js":"17","/Users/charliewilson/personal/stan-band/client/src/reducers/bandSearchReducer.js":"18","/Users/charliewilson/personal/stan-band/client/src/components/search/SearchSpotify.js":"19","/Users/charliewilson/personal/stan-band/client/src/components/search/Search.js":"20","/Users/charliewilson/personal/stan-band/client/src/components/search/SearchDatabase.js":"21","/Users/charliewilson/personal/stan-band/client/src/reducers/spotifySearchReducer.js":"22","/Users/charliewilson/personal/stan-band/client/src/reducers/spotifyAuthTokenReducer.js":"23","/Users/charliewilson/personal/stan-band/client/src/reducers/userReducer.js":"24","/Users/charliewilson/personal/stan-band/client/src/components/bands/Comment.js":"25"},{"size":555,"mtime":1624659750342,"results":"26","hashOfConfig":"27"},{"size":941,"mtime":1624656249872,"results":"28","hashOfConfig":"27"},{"size":436,"mtime":1624984287182,"results":"29","hashOfConfig":"27"},{"size":1353,"mtime":1625420135523,"results":"30","hashOfConfig":"27"},{"size":2082,"mtime":1625753548380,"results":"31","hashOfConfig":"27"},{"size":178,"mtime":1624640901936,"results":"32","hashOfConfig":"27"},{"size":2211,"mtime":1625591130907,"results":"33","hashOfConfig":"27"},{"size":4194,"mtime":1625752829282,"results":"34","hashOfConfig":"27"},{"size":166,"mtime":1624640951002,"results":"35","hashOfConfig":"27"},{"size":783,"mtime":1624989008922,"results":"36","hashOfConfig":"27"},{"size":1355,"mtime":1625753477161,"results":"37","hashOfConfig":"27"},{"size":1142,"mtime":1625623615182,"results":"38","hashOfConfig":"27"},{"size":9639,"mtime":1625695865992,"results":"39","hashOfConfig":"27"},{"size":2382,"mtime":1625420033612,"results":"40","hashOfConfig":"27"},{"size":102,"mtime":1624658429087,"results":"41","hashOfConfig":"27"},{"size":103,"mtime":1624679995655,"results":"42","hashOfConfig":"27"},{"size":103,"mtime":1624679999777,"results":"43","hashOfConfig":"27"},{"size":782,"mtime":1625623740903,"results":"44","hashOfConfig":"27"},{"size":829,"mtime":1624811819898,"results":"45","hashOfConfig":"27"},{"size":1283,"mtime":1625752078311,"results":"46","hashOfConfig":"27"},{"size":798,"mtime":1624809902106,"results":"47","hashOfConfig":"27"},{"size":470,"mtime":1624810238627,"results":"48","hashOfConfig":"27"},{"size":674,"mtime":1624987555073,"results":"49","hashOfConfig":"27"},{"size":550,"mtime":1625063544447,"results":"50","hashOfConfig":"27"},{"size":2610,"mtime":1625680150891,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"pwjl0q",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/charliewilson/personal/stan-band/client/src/index.js",[],["105","106"],"/Users/charliewilson/personal/stan-band/client/src/components/App.js",[],"/Users/charliewilson/personal/stan-band/client/src/reducers/index.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/Header.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/bands/Home.js",["107"],"/Users/charliewilson/personal/stan-band/client/src/components/bands/BandList.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/bands/NewBandList.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/bands/Band.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/bands/Stan.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/bands/SpotifyCallback.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/TopBands.js",[],"/Users/charliewilson/personal/stan-band/client/src/actions/types.js",[],"/Users/charliewilson/personal/stan-band/client/src/actions/index.js",["108","109","110","111"],"import { v4 as uuidv4 } from 'uuid';\n\nimport spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport {\n  ACCESS_TOKEN_RECEIVED,\n  FETCH_CURRENT_USER,\n  SIGN_OUT,\n  SEARCH_SPOTIFY_VALUE_UPDATE,\n  SEARCH_SPOTIFY,\n  FETCH_BANDS,\n  FETCH_BAND_BY_ID,\n  CREATE_BAND,\n  EDIT_BAND,\n  DELETE_BAND,\n  SEARCH_BAND_VALUE_UPDATE,\n  SEARCH_BANDS,\n  BAND_SELECTED,\n  FETCH_USERS,\n  FETCH_USER,\n  FETCH_USER_BY_ID,\n  CREATE_USER,\n  EDIT_USER,\n  DELETE_USER,\n  NEW_COMMENT_CHANGE,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT\n} from './types';\n\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({ type: ACCESS_TOKEN_RECEIVED, payload: token });\n};\n\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: response.data.images[0].url } });\n  } else {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: null } });\n  }\n\n};\n\nexport const signOut = () => async dispatch => {\n  dispatch({ type: SIGN_OUT });\n};\n\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_SPOTIFY_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchSpotify = (searchValue) => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n\n  /* check if user is following one or more artists */\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject, isFollowing };\n  });\n\n  dispatch({ type: SEARCH_SPOTIFY, payload: mergedResponse });\n}\n\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n\n  dispatch({ type: FETCH_BANDS, payload: response.data });\n}\n\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n\n  dispatch({ type: FETCH_BAND_BY_ID, payload: response.data });\n}\n\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n\n  dispatch({ type: CREATE_BAND, payload: response.data });\n  dispatch(bandSelected(response.data));\n  dispatch(stanBand());\n}\n\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n\n  dispatch({ type: EDIT_BAND, payload: response.data });\n};\n\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n\n  dispatch({ type: DELETE_BAND, payload: id });\n};\n\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_BAND_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchBands = (searchValue) => async (dispatch, getState) => {\n  const response = await bands.get(`?name_like=${searchValue}`);\n\n  dispatch({ type: SEARCH_BANDS, payload: response.data });\n}\n\nexport const bandSelected = band => dispatch => {\n  dispatch({ type: BAND_SELECTED, payload: band });\n}\n\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n\n  dispatch({ type: FETCH_USERS, payload: response.data });\n}\n\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n\n  dispatch({ type: FETCH_USER, payload: response.data });\n}\n\nexport const newCommentChange = (commentValue) => async dispatch => {\n  dispatch({ type: NEW_COMMENT_CHANGE, payload: commentValue });\n}\n\nexport const likeComment = comment => async (dispatch, getState) => {\n  const userId = getState().currentUser.user.userId;\n  const commentLikers = [ ...comment.likers, userId ];\n  const editedComment = { ...comment, likers: commentLikers };\n\n  const filteredComments = getState().bandSearch.selected.comments.filter(cmt => cmt.uuid !== comment.uuid);\n  const editedComments = [ editedComment, ...filteredComments ];\n\n  const bandId = getState().bandSearch.selected.id;\n  const band = { ...getState().bandSearch.selected, comments: editedComments };\n  dispatch(editBand(band, bandId));\n}\n\nexport const unlikeComment = comment => async (dispatch, getState) => {\n  const userId = getState().currentUser.user.userId;\n  const commentLikers = comment.likers.filter(liker => liker !== userId);\n  const editedComment = { ...comment, likers: commentLikers };\n\n  const filteredComments = getState().bandSearch.selected.comments.filter(cmt => cmt.uuid !== comment.uuid);\n  const editedComments = [ editedComment, ...filteredComments ];\n\n  const bandId = getState().bandSearch.selected.id;\n  const band = { ...getState().bandSearch.selected, comments: editedComments };\n  dispatch(editBand(band, bandId));\n}\n\nexport const addNewComment = () => async (dispatch, getState) => {\n\n  const commentValue = getState().bandSearch.newComment;\n\n  // validate commentValue\n  if (!commentValue || commentValue === \"\") {\n    console.log('cannot upload an empty or null comment!');\n    return;\n  }\n\n  const currentUser = getState().currentUser.user;\n\n  if (!currentUser) {\n    console.log('there is no user logged in!');\n    return;\n  }\n  // construct band comment object\n  const uuid = uuidv4();\n  const timePosted = new Date().toUTCString();\n  const spotifyUserId = currentUser.userId;\n  const upvotes = 1;\n  const downvotes = 0;\n  const body = commentValue;\n\n  const bandComment = {\n    \"uuid\": uuid,\n    \"timePosted\": timePosted,\n    \"userId\": spotifyUserId,\n    \"body\": body,\n    \"likers\": [ spotifyUserId ]\n  };\n\n  // add comment object to band\n  const bandId = getState().bandSearch.selected.id;\n  const bandComments = [ ...getState().bandSearch.selected.comments, bandComment ];\n  const band = { ...getState().bandSearch.selected, comments: bandComments };\n  dispatch(editBand(band, bandId));\n\n  // construct user comment object\n  const spotifyBandId = getState().bandSearch.selected.spotifyBandId;\n\n  const userComment = {\n    \"uuid\": uuid,\n    \"timePosted\": timePosted,\n    \"bandId\": spotifyBandId,\n    \"body\": body\n  };\n\n  // add comment object to user\n  const userId = currentUser.id;\n  const userComments = [ ...currentUser.comments, userComment ];\n  const user = { ...currentUser, comments: userComments };\n  dispatch(editUser(user, userId));\n  // update redux store with response\n  dispatch(newCommentChange(null));\n}\n\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const { userId, imageUrl } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`);\n\n  // if user exists\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({ type: FETCH_USER_BY_ID, payload: response.data[0] });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({ imageUrl, stanning: [], comments: [] }));\n  }\n\n}\n\nexport const createUser = user => async (dispatch, getState) => {\n  const { userId } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user, userId });\n\n  console.log('create that user');\n\n  dispatch({ type: CREATE_USER, payload: response.data });\n}\n\nexport const stanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [ ...user.stanning, currentBandId];\n  const editedUser = { ...user, stanning: stanningArray };\n\n  dispatch(editUser(editedUser, user.id));\n\n  const bandStans = [ ...getState().bandSearch.selected.stans, user.userId ];\n  const editedBand = { ...getState().bandSearch.selected, stans: bandStans };\n\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n}\n\nexport const unstanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = user.stanning.filter(o => o !== currentBandId);\n  const editedUser = { ...user, stanning: stanningArray };\n\n  dispatch(editUser(editedUser, user.id));\n\n  const bandStans = getState().bandSearch.selected.stans.filter(o => o !== user.userId);\n  const editedBand = { ...getState().bandSearch.selected, stans: bandStans };\n\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n}\n\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n\n  dispatch({ type: EDIT_USER, payload: response.data });\n};\n\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n\n  dispatch({ type: DELETE_USER, payload: id });\n};\n","/Users/charliewilson/personal/stan-band/client/src/components/BandCard.js",["112"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { createBand, bandSelected } from '../actions';\nimport '../styles/styles.css';\n\nclass BandCard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.band = {\n      id: this.props.id,\n      spotifyBandId: this.props.spotifyBandId,\n      name: this.props.bandName,\n      stanCount: this.props.stanCount,\n      profileImage: this.props.imagePath,\n      introducerUserId: this.props.introducerUserId,\n      stans: this.props.stans,\n      comments: this.props.comments\n    };\n  }\n\n  onAddClick = () => {\n\n    this.band = {\n      id: this.props.id,\n      spotifyBandId: this.props.spotifyBandId,\n      name: this.props.bandName,\n      stanCount: 1,\n      profileImage: this.props.imagePath,\n      introducerUserId: this.props.currentUserSpotifyId,\n      stans: [],\n      comments: []\n    };\n\n    this.props.createBand(this.band);\n  }\n\n  render() {\n\n    const imagePath = this.props.imagePath;\n    const bandName = this.props.bandName;\n    const stanCount = this.props.stanCount;\n\n    return (\n      <div>\n        <Link onClick={() => this.props.bandSelected(this.band)} to=\"/band\">\n\n          <div className=\"bandCard\">\n            <img className=\"profileImage\" src={imagePath} />\n            <h4 className=\"bandName\">\n              <b>{bandName}</b>\n            </h4>\n            <p className=\"bandType\">\n              {this.props.hideStansLabel ? null : <label>{stanCount} Stans</label>}\n            </p>\n          </div>\n          {\n            ( this.props.hideStansLabel && this.props.isFollowing ) ?\n              ( <div className=\"extra content\">\n                <button onClick={this.onAddClick} className=\"ui primary button\">\n                  <i className=\"add icon\"></i>\n                  Add to Site\n                </button>\n              </div> ) :\n            ( null )\n          }\n        </Link>\n      </div>\n    );\n  }\n\n}\n\nBandCard.defaultProps = {\n  hideStansLabel: false\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchValue: state.bandSearch.value,\n    searchResults: state.bandSearch.results,\n    currentUserSpotifyId: state.spotifyAuth.userId,\n    currentUserId: state.currentUser.user ? state.currentUser.user.id : null\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { createBand, bandSelected }\n)(BandCard);\n","/Users/charliewilson/personal/stan-band/client/src/apis/spotify.js",[],"/Users/charliewilson/personal/stan-band/client/src/apis/bands.js",[],"/Users/charliewilson/personal/stan-band/client/src/apis/users.js",[],"/Users/charliewilson/personal/stan-band/client/src/reducers/bandSearchReducer.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/search/SearchSpotify.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/search/Search.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/search/SearchDatabase.js",[],"/Users/charliewilson/personal/stan-band/client/src/reducers/spotifySearchReducer.js",[],"/Users/charliewilson/personal/stan-band/client/src/reducers/spotifyAuthTokenReducer.js",[],"/Users/charliewilson/personal/stan-band/client/src/reducers/userReducer.js",[],"/Users/charliewilson/personal/stan-band/client/src/components/bands/Comment.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":22,"column":13,"nodeType":"119","endLine":22,"endColumn":49},{"ruleId":"120","severity":1,"message":"121","line":27,"column":3,"nodeType":"122","messageId":"123","endLine":27,"endColumn":15},{"ruleId":"120","severity":1,"message":"124","line":28,"column":3,"nodeType":"122","messageId":"123","endLine":28,"endColumn":17},{"ruleId":"120","severity":1,"message":"125","line":213,"column":9,"nodeType":"122","messageId":"123","endLine":213,"endColumn":16},{"ruleId":"120","severity":1,"message":"126","line":214,"column":9,"nodeType":"122","messageId":"123","endLine":214,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":51,"column":13,"nodeType":"129","endLine":51,"endColumn":61},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'LIKE_COMMENT' is defined but never used.","Identifier","unusedVar","'UNLIKE_COMMENT' is defined but never used.","'upvotes' is assigned a value but never used.","'downvotes' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]