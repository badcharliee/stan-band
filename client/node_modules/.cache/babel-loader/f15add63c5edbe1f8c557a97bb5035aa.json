{"ast":null,"code":"import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport { ACCESS_TOKEN_RECEIVED, FETCH_CURRENT_USER, SIGN_OUT, SEARCH_SPOTIFY_VALUE_UPDATE, SEARCH_SPOTIFY, FETCH_BANDS, FETCH_BAND_BY_ID, CREATE_BAND, EDIT_BAND, DELETE_BAND, SEARCH_BAND_VALUE_UPDATE, SEARCH_BANDS, BAND_SELECTED, FETCH_USERS, FETCH_USER, FETCH_USER_BY_ID, CREATE_USER, EDIT_USER, DELETE_USER } from './types';\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({\n    type: ACCESS_TOKEN_RECEIVED,\n    payload: token\n  });\n};\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n  dispatch({\n    type: FETCH_CURRENT_USER,\n    payload: response.data.id\n  });\n};\nexport const signOut = () => async dispatch => {\n  dispatch({\n    type: SIGN_OUT\n  });\n};\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_SPOTIFY_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchSpotify = searchValue => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n  /* check if user is following one or more artists */\n\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject,\n      isFollowing\n    };\n  });\n  dispatch({\n    type: SEARCH_SPOTIFY,\n    payload: mergedResponse\n  });\n};\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n  dispatch({\n    type: FETCH_BANDS,\n    payload: response.data\n  });\n};\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n  dispatch({\n    type: FETCH_BAND_BY_ID,\n    payload: response.data\n  });\n};\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n  dispatch({\n    type: CREATE_BAND,\n    payload: response.data\n  });\n};\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n  dispatch({\n    type: EDIT_BAND,\n    payload: response.data\n  });\n};\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n  dispatch({\n    type: DELETE_BAND,\n    payload: id\n  });\n};\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_BAND_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchBands = searchValue => async (dispatch, getState) => {\n  /* retrieves band data from native database, then retrieves band photos from spotify */\n  const response = await bands.get(`?name_like=${searchValue}`);\n  dispatch({\n    type: SEARCH_BANDS,\n    payload: response.data\n  });\n  /* use this chunk when searching for new spotify artists */\n  // var responses = await Promise.all(getState().bandSearch.results.map(async result => {\n  //   const bandResponse = await spotify.get(`/artists/${result.bandId}`, {\n  //     headers: {\n  //       Authorization: 'Bearer ' + getState().auth.accessToken\n  //     }\n  //   }).catch((error) => { return null; });\n  //\n  //   return bandResponse;\n  // }));\n  //\n  // responses = responses.filter((response) => { return response !== null });\n};\nexport const bandSelected = band => dispatch => {\n  dispatch({\n    type: BAND_SELECTED,\n    payload: band\n  });\n};\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n  dispatch({\n    type: FETCH_USER,\n    payload: response.data\n  });\n};\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const userId = getState().spotifyAuth.userId;\n  const response = await users.get(`?userId=${userId}`); // if user exists\n\n  if (response.data.length > 0) {\n    dispatch({\n      type: FETCH_USER_BY_ID,\n      payload: response.data[0]\n    });\n    return;\n  }\n};\nexport const createUser = user => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user,\n    userId\n  });\n  dispatch({\n    type: CREATE_USER,\n    payload: response.data\n  });\n};\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n  dispatch({\n    type: EDIT_USER,\n    payload: response.data\n  });\n};\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n  dispatch({\n    type: DELETE_USER,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/actions/index.js"],"names":["spotify","bands","users","ACCESS_TOKEN_RECEIVED","FETCH_CURRENT_USER","SIGN_OUT","SEARCH_SPOTIFY_VALUE_UPDATE","SEARCH_SPOTIFY","FETCH_BANDS","FETCH_BAND_BY_ID","CREATE_BAND","EDIT_BAND","DELETE_BAND","SEARCH_BAND_VALUE_UPDATE","SEARCH_BANDS","BAND_SELECTED","FETCH_USERS","FETCH_USER","FETCH_USER_BY_ID","CREATE_USER","EDIT_USER","DELETE_USER","accessTokenReceived","token","dispatch","type","payload","fetchCurrentUser","getState","response","get","headers","Authorization","spotifyAuth","accessToken","data","id","signOut","searchSpotifyValueUpdate","searchValue","searchSpotify","searchResponse","params","q","limit","ids","artists","items","map","artistObject","idsString","join","followingResponse","isFollowingArray","i","mergedResponse","isFollowing","fetchBands","fetchBand","createBand","band","post","editBand","put","deleteBand","delete","searchBandValueUpdate","searchBands","bandSelected","fetchUsers","fetchUser","fetchUserByUserId","userId","length","createUser","user","editUser","deleteUser"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SACEC,qBADF,EAEEC,kBAFF,EAGEC,QAHF,EAIEC,2BAJF,EAKEC,cALF,EAMEC,WANF,EAOEC,gBAPF,EAQEC,WARF,EASEC,SATF,EAUEC,WAVF,EAWEC,wBAXF,EAYEC,YAZF,EAaEC,aAbF,EAcEC,WAdF,EAeEC,UAfF,EAgBEC,gBAhBF,EAiBEC,WAjBF,EAkBEC,SAlBF,EAmBEC,WAnBF,QAmBqB,SAnBrB;AAqBA;;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAI,MAAMC,QAAN,IAAkB;AAC5DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEtB,qBAAR;AAA+BuB,IAAAA,OAAO,EAAEH;AAAxC,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMI,gBAAgB,GAAG,MAAM,OAAOH,QAAP,EAAiBI,QAAjB,KAA8B;AAClE,QAAMC,QAAQ,GAAG,MAAM7B,OAAO,CAAC8B,GAAR,CAAY,KAAZ,EAAmB;AACxCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYJ,QAAQ,GAAGK,WAAX,CAAuBC;AAD3C;AAD+B,GAAnB,CAAvB;AAMAV,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAErB,kBAAR;AAA4BsB,IAAAA,OAAO,EAAEG,QAAQ,CAACM,IAAT,CAAcC;AAAnD,GAAD,CAAR;AACD,CARM;AAUP,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAMb,QAAN,IAAkB;AAC7CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEpB;AAAR,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMiC,wBAAwB,GAAGC,WAAW,IAAI,MAAMf,QAAN,IAAkB;AACvEA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEnB,2BAAR;AAAqCoB,IAAAA,OAAO,EAAEa;AAA9C,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAID,WAAD,IAAiB,OAAOf,QAAP,EAAiBI,QAAjB,KAA8B;AAC1E;AACA,QAAMa,cAAc,GAAG,MAAMzC,OAAO,CAAC8B,GAAR,CAAY,QAAZ,EAAsB;AACjDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYJ,QAAQ,GAAGK,WAAX,CAAuBC;AAD3C,KADwC;AAIjDQ,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAEJ,WADG;AAENd,MAAAA,IAAI,EAAE,QAFA;AAGNmB,MAAAA,KAAK,EAAE;AAHD;AAJyC,GAAtB,CAA7B;AAWA;;AACA,QAAMC,GAAG,GAAGJ,cAAc,CAACN,IAAf,CAAoBW,OAApB,CAA4BC,KAA5B,CAAkCC,GAAlC,CAAsCC,YAAY,IAAI;AAChE,WAAOA,YAAY,CAACb,EAApB;AACD,GAFW,CAAZ;AAGA,QAAMc,SAAS,GAAGL,GAAG,CAACM,IAAJ,EAAlB;AAEA,QAAMC,iBAAiB,GAAG,MAAMpD,OAAO,CAAC8B,GAAR,CAAY,wBAAZ,EAAsC;AACpEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYJ,QAAQ,GAAGK,WAAX,CAAuBC;AAD3C,KAD2D;AAIpEQ,IAAAA,MAAM,EAAE;AACNjB,MAAAA,IAAI,EAAE,QADA;AAENoB,MAAAA,GAAG,EAAEK;AAFC;AAJ4D,GAAtC,CAAhC;AASA,QAAMG,gBAAgB,GAAGD,iBAAiB,CAACjB,IAA3C;AAEA,MAAImB,CAAC,GAAG,CAAR;AACA,QAAMC,cAAc,GAAGd,cAAc,CAACN,IAAf,CAAoBW,OAApB,CAA4BC,KAA5B,CAAkCC,GAAlC,CAAsCC,YAAY,IAAI;AAC3E,UAAMO,WAAW,GAAGH,gBAAgB,CAACC,CAAD,CAApC;AACAA,IAAAA,CAAC,IAAI,CAAL;AACA,WAAO,EAAE,GAAGL,YAAL;AAAmBO,MAAAA;AAAnB,KAAP;AACD,GAJsB,CAAvB;AAMAhC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAElB,cAAR;AAAwBmB,IAAAA,OAAO,EAAE6B;AAAjC,GAAD,CAAR;AACD,CAtCM;AAwCP;;AAEA,OAAO,MAAME,UAAU,GAAG,MAAM,MAAMjC,QAAN,IAAkB;AAChD,QAAMK,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAU,GAAV,CAAvB;AAEAN,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEjB,WAAR;AAAqBkB,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAAvC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMuB,SAAS,GAAGtB,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AAC/C,QAAMK,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAW,IAAGM,EAAG,EAAjB,CAAvB;AAEAZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEhB,gBAAR;AAA0BiB,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAA5C,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMwB,UAAU,GAAGC,IAAI,IAAI,OAAOpC,QAAP,EAAiBI,QAAjB,KAA8B;AAC9D;AACA,QAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC4D,IAAN,CAAW,EAAX,EAAeD,IAAf,CAAvB;AAEApC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEf,WAAR;AAAqBgB,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAAvC,GAAD,CAAR;AACD,CALM;AAOP,OAAO,MAAM2B,QAAQ,GAAG,CAACF,IAAD,EAAOxB,EAAP,KAAc,MAAMZ,QAAN,IAAkB;AACtD,QAAMK,QAAQ,GAAG,MAAM5B,KAAK,CAAC8D,GAAN,CAAW,IAAG3B,EAAG,EAAjB,EAAoBwB,IAApB,CAAvB;AAEApC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEd,SAAR;AAAmBe,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAArC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAM6B,UAAU,GAAG5B,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AAChD,QAAMvB,KAAK,CAACgE,MAAN,CAAc,IAAG7B,EAAG,EAApB,CAAN;AAEAZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEb,WAAR;AAAqBc,IAAAA,OAAO,EAAEU;AAA9B,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAM8B,qBAAqB,GAAG3B,WAAW,IAAI,MAAMf,QAAN,IAAkB;AACpEA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEZ,wBAAR;AAAkCa,IAAAA,OAAO,EAAEa;AAA3C,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAM4B,WAAW,GAAI5B,WAAD,IAAiB,OAAOf,QAAP,EAAiBI,QAAjB,KAA8B;AACxE;AACA,QAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAW,cAAaS,WAAY,EAApC,CAAvB;AAEAf,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX,YAAR;AAAsBY,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAAxC,GAAD,CAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAlBM;AAoBP,OAAO,MAAMiC,YAAY,GAAGR,IAAI,IAAIpC,QAAQ,IAAI;AAC9CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEV,aAAR;AAAuBW,IAAAA,OAAO,EAAEkC;AAAhC,GAAD,CAAR;AACD,CAFM;AAIP;;AAEA,OAAO,MAAMS,UAAU,GAAG,MAAM,MAAM7C,QAAN,IAAkB;AAChD,QAAMK,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAN,CAAU,GAAV,CAAvB;AAEAN,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAET,WAAR;AAAqBU,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAAvC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMmC,SAAS,GAAGlC,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AAC/C,QAAMK,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAN,CAAW,IAAGM,EAAG,EAAjB,CAAvB;AAEAZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAER,UAAR;AAAoBS,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAAtC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMoC,iBAAiB,GAAG,MAAM,OAAO/C,QAAP,EAAiBI,QAAjB,KAA8B;AACnE,QAAM4C,MAAM,GAAG5C,QAAQ,GAAGK,WAAX,CAAuBuC,MAAtC;AACA,QAAM3C,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAN,CAAW,WAAU0C,MAAO,EAA5B,CAAvB,CAFmE,CAInE;;AACA,MAAI3C,QAAQ,CAACM,IAAT,CAAcsC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BjD,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,gBAAR;AAA0BQ,MAAAA,OAAO,EAAEG,QAAQ,CAACM,IAAT,CAAc,CAAd;AAAnC,KAAD,CAAR;AACA;AACD;AAGF,CAXM;AAaP,OAAO,MAAMuC,UAAU,GAAGC,IAAI,IAAI,OAAOnD,QAAP,EAAiBI,QAAjB,KAA8B;AAC9D,QAAM;AAAE4C,IAAAA;AAAF,MAAa5C,QAAQ,GAAGK,WAA9B;AACA,QAAMJ,QAAQ,GAAG,MAAM3B,KAAK,CAAC2D,IAAN,CAAW,GAAX,EAAgB,EAAE,GAAGc,IAAL;AAAWH,IAAAA;AAAX,GAAhB,CAAvB;AAEAhD,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN,WAAR;AAAqBO,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAAvC,GAAD,CAAR;AACD,CALM;AAOP,OAAO,MAAMyC,QAAQ,GAAG,CAACD,IAAD,EAAOvC,EAAP,KAAc,MAAMZ,QAAN,IAAkB;AACtD,QAAMK,QAAQ,GAAG,MAAM3B,KAAK,CAAC6D,GAAN,CAAW,IAAG3B,EAAG,EAAjB,EAAoBuC,IAApB,CAAvB;AAEAnD,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,SAAR;AAAmBM,IAAAA,OAAO,EAAEG,QAAQ,CAACM;AAArC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAM0C,UAAU,GAAGzC,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AAChD,QAAMtB,KAAK,CAAC+D,MAAN,CAAc,IAAG7B,EAAG,EAApB,CAAN;AAEAZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ,WAAR;AAAqBK,IAAAA,OAAO,EAAEU;AAA9B,GAAD,CAAR;AACD,CAJM","sourcesContent":["import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport {\n  ACCESS_TOKEN_RECEIVED,\n  FETCH_CURRENT_USER,\n  SIGN_OUT,\n  SEARCH_SPOTIFY_VALUE_UPDATE,\n  SEARCH_SPOTIFY,\n  FETCH_BANDS,\n  FETCH_BAND_BY_ID,\n  CREATE_BAND,\n  EDIT_BAND,\n  DELETE_BAND,\n  SEARCH_BAND_VALUE_UPDATE,\n  SEARCH_BANDS,\n  BAND_SELECTED,\n  FETCH_USERS,\n  FETCH_USER,\n  FETCH_USER_BY_ID,\n  CREATE_USER,\n  EDIT_USER,\n  DELETE_USER } from './types';\n\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({ type: ACCESS_TOKEN_RECEIVED, payload: token });\n};\n\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  dispatch({ type: FETCH_CURRENT_USER, payload: response.data.id });\n};\n\nexport const signOut = () => async dispatch => {\n  dispatch({ type: SIGN_OUT });\n};\n\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_SPOTIFY_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchSpotify = (searchValue) => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n\n  /* check if user is following one or more artists */\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject, isFollowing };\n  });\n\n  dispatch({ type: SEARCH_SPOTIFY, payload: mergedResponse });\n}\n\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n\n  dispatch({ type: FETCH_BANDS, payload: response.data });\n}\n\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n\n  dispatch({ type: FETCH_BAND_BY_ID, payload: response.data });\n}\n\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n\n  dispatch({ type: CREATE_BAND, payload: response.data });\n}\n\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n\n  dispatch({ type: EDIT_BAND, payload: response.data });\n};\n\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n\n  dispatch({ type: DELETE_BAND, payload: id });\n};\n\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_BAND_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchBands = (searchValue) => async (dispatch, getState) => {\n  /* retrieves band data from native database, then retrieves band photos from spotify */\n  const response = await bands.get(`?name_like=${searchValue}`);\n\n  dispatch({ type: SEARCH_BANDS, payload: response.data });\n\n  /* use this chunk when searching for new spotify artists */\n  // var responses = await Promise.all(getState().bandSearch.results.map(async result => {\n  //   const bandResponse = await spotify.get(`/artists/${result.bandId}`, {\n  //     headers: {\n  //       Authorization: 'Bearer ' + getState().auth.accessToken\n  //     }\n  //   }).catch((error) => { return null; });\n  //\n  //   return bandResponse;\n  // }));\n  //\n  // responses = responses.filter((response) => { return response !== null });\n}\n\nexport const bandSelected = band => dispatch => {\n  dispatch({ type: BAND_SELECTED, payload: band });\n}\n\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n\n  dispatch({ type: FETCH_USERS, payload: response.data });\n}\n\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n\n  dispatch({ type: FETCH_USER, payload: response.data });\n}\n\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const userId = getState().spotifyAuth.userId;\n  const response = await users.get(`?userId=${userId}`);\n\n  // if user exists\n  if (response.data.length > 0) {\n    dispatch({ type: FETCH_USER_BY_ID, payload: response.data[0] });\n    return;\n  }\n\n\n}\n\nexport const createUser = user => async (dispatch, getState) => {\n  const { userId } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user, userId });\n\n  dispatch({ type: CREATE_USER, payload: response.data });\n}\n\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n\n  dispatch({ type: EDIT_USER, payload: response.data });\n};\n\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n\n  dispatch({ type: DELETE_USER, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}