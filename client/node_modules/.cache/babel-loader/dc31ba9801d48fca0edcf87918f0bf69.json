{"ast":null,"code":"import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport { ACCESS_TOKEN_RECEIVED, FETCH_CURRENT_USER, SIGN_OUT, SEARCH_SPOTIFY_VALUE_UPDATE, SEARCH_SPOTIFY, FETCH_BANDS, FETCH_BAND_BY_ID, CREATE_BAND, EDIT_BAND, DELETE_BAND, SEARCH_BAND_VALUE_UPDATE, SEARCH_BANDS, BAND_SELECTED, FETCH_USERS, FETCH_USER, FETCH_USER_BY_ID, CREATE_USER, EDIT_USER, DELETE_USER } from './types';\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({\n    type: ACCESS_TOKEN_RECEIVED,\n    payload: token\n  });\n};\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({\n      type: FETCH_CURRENT_USER,\n      payload: {\n        id: response.data.id,\n        imageUrl: response.data.images[0].url\n      }\n    });\n  } else {\n    dispatch({\n      type: FETCH_CURRENT_USER,\n      payload: {\n        id: response.data.id,\n        imageUrl: null\n      }\n    });\n  }\n};\nexport const signOut = () => async dispatch => {\n  dispatch({\n    type: SIGN_OUT\n  });\n};\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_SPOTIFY_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchSpotify = searchValue => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n  /* check if user is following one or more artists */\n\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject,\n      isFollowing\n    };\n  });\n  dispatch({\n    type: SEARCH_SPOTIFY,\n    payload: mergedResponse\n  });\n};\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n  dispatch({\n    type: FETCH_BANDS,\n    payload: response.data\n  });\n};\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n  dispatch({\n    type: FETCH_BAND_BY_ID,\n    payload: response.data\n  });\n};\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n  dispatch({\n    type: CREATE_BAND,\n    payload: response.data\n  });\n};\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n  dispatch({\n    type: EDIT_BAND,\n    payload: response.data\n  });\n};\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n  dispatch({\n    type: DELETE_BAND,\n    payload: id\n  });\n};\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_BAND_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchBands = searchValue => async (dispatch, getState) => {\n  /* retrieves band data from native database, then retrieves band photos from spotify */\n  const response = await bands.get(`?name_like=${searchValue}`);\n  dispatch({\n    type: SEARCH_BANDS,\n    payload: response.data\n  });\n  /* use this chunk when searching for new spotify artists */\n  // var responses = await Promise.all(getState().bandSearch.results.map(async result => {\n  //   const bandResponse = await spotify.get(`/artists/${result.bandId}`, {\n  //     headers: {\n  //       Authorization: 'Bearer ' + getState().auth.accessToken\n  //     }\n  //   }).catch((error) => { return null; });\n  //\n  //   return bandResponse;\n  // }));\n  //\n  // responses = responses.filter((response) => { return response !== null });\n};\nexport const bandSelected = band => dispatch => {\n  dispatch({\n    type: BAND_SELECTED,\n    payload: band\n  });\n};\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n  dispatch({\n    type: FETCH_USER,\n    payload: response.data\n  });\n};\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\n\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const {\n    userId,\n    imageUrl\n  } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`); // if user exists\n\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({\n      type: FETCH_USER_BY_ID,\n      payload: response.data[0]\n    });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({\n      imageUrl,\n      stanning: [],\n      comments: []\n    }));\n  }\n};\nexport const createUser = user => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user,\n    userId\n  });\n  console.log('create that user');\n  dispatch({\n    type: CREATE_USER,\n    payload: response.data\n  });\n};\nexport const stanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.bandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [...user.stanning, currentBandId];\n  const editedUser = { ...user,\n    stanning: stanningArray\n  }; // dispatch me\n\n  dispatch(editUser(editedUser, user.id));\n};\nexport const unstanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.bandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [...user.stanning, currentBandId];\n  const editedUser = { ...user,\n    stanning: stanningArray\n  }; // dispatch me\n\n  dispatch(editUser(editedUser, user.id));\n};\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n  console.log(response.data);\n  dispatch({\n    type: EDIT_USER,\n    payload: response.data\n  });\n};\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n  dispatch({\n    type: DELETE_USER,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/actions/index.js"],"names":["spotify","bands","users","ACCESS_TOKEN_RECEIVED","FETCH_CURRENT_USER","SIGN_OUT","SEARCH_SPOTIFY_VALUE_UPDATE","SEARCH_SPOTIFY","FETCH_BANDS","FETCH_BAND_BY_ID","CREATE_BAND","EDIT_BAND","DELETE_BAND","SEARCH_BAND_VALUE_UPDATE","SEARCH_BANDS","BAND_SELECTED","FETCH_USERS","FETCH_USER","FETCH_USER_BY_ID","CREATE_USER","EDIT_USER","DELETE_USER","accessTokenReceived","token","dispatch","type","payload","fetchCurrentUser","getState","response","get","headers","Authorization","spotifyAuth","accessToken","data","images","length","id","imageUrl","url","signOut","searchSpotifyValueUpdate","searchValue","searchSpotify","searchResponse","params","q","limit","ids","artists","items","map","artistObject","idsString","join","followingResponse","isFollowingArray","i","mergedResponse","isFollowing","fetchBands","fetchBand","createBand","band","post","editBand","put","deleteBand","delete","searchBandValueUpdate","searchBands","bandSelected","fetchUsers","fetchUser","fetchUserByUserId","userId","console","log","createUser","stanning","comments","user","stanBand","currentBandId","bandSearch","selected","bandId","currentUser","stanningArray","editedUser","editUser","unstanBand","deleteUser"],"mappings":"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","sourcesContent":["import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport {\n  ACCESS_TOKEN_RECEIVED,\n  FETCH_CURRENT_USER,\n  SIGN_OUT,\n  SEARCH_SPOTIFY_VALUE_UPDATE,\n  SEARCH_SPOTIFY,\n  FETCH_BANDS,\n  FETCH_BAND_BY_ID,\n  CREATE_BAND,\n  EDIT_BAND,\n  DELETE_BAND,\n  SEARCH_BAND_VALUE_UPDATE,\n  SEARCH_BANDS,\n  BAND_SELECTED,\n  FETCH_USERS,\n  FETCH_USER,\n  FETCH_USER_BY_ID,\n  CREATE_USER,\n  EDIT_USER,\n  DELETE_USER } from './types';\n\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({ type: ACCESS_TOKEN_RECEIVED, payload: token });\n};\n\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: response.data.images[0].url } });\n  } else {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: null } });\n  }\n\n};\n\nexport const signOut = () => async dispatch => {\n  dispatch({ type: SIGN_OUT });\n};\n\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_SPOTIFY_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchSpotify = (searchValue) => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n\n  /* check if user is following one or more artists */\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject, isFollowing };\n  });\n\n  dispatch({ type: SEARCH_SPOTIFY, payload: mergedResponse });\n}\n\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n\n  dispatch({ type: FETCH_BANDS, payload: response.data });\n}\n\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n\n  dispatch({ type: FETCH_BAND_BY_ID, payload: response.data });\n}\n\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n\n  dispatch({ type: CREATE_BAND, payload: response.data });\n}\n\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n\n  dispatch({ type: EDIT_BAND, payload: response.data });\n};\n\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n\n  dispatch({ type: DELETE_BAND, payload: id });\n};\n\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_BAND_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchBands = (searchValue) => async (dispatch, getState) => {\n  /* retrieves band data from native database, then retrieves band photos from spotify */\n  const response = await bands.get(`?name_like=${searchValue}`);\n\n  dispatch({ type: SEARCH_BANDS, payload: response.data });\n\n  /* use this chunk when searching for new spotify artists */\n  // var responses = await Promise.all(getState().bandSearch.results.map(async result => {\n  //   const bandResponse = await spotify.get(`/artists/${result.bandId}`, {\n  //     headers: {\n  //       Authorization: 'Bearer ' + getState().auth.accessToken\n  //     }\n  //   }).catch((error) => { return null; });\n  //\n  //   return bandResponse;\n  // }));\n  //\n  // responses = responses.filter((response) => { return response !== null });\n}\n\nexport const bandSelected = band => dispatch => {\n  dispatch({ type: BAND_SELECTED, payload: band });\n}\n\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n\n  dispatch({ type: FETCH_USERS, payload: response.data });\n}\n\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n\n  dispatch({ type: FETCH_USER, payload: response.data });\n}\n\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const { userId, imageUrl } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`);\n\n  // if user exists\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({ type: FETCH_USER_BY_ID, payload: response.data[0] });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({ imageUrl, stanning: [], comments: [] }));\n  }\n\n}\n\nexport const createUser = user => async (dispatch, getState) => {\n  const { userId } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user, userId });\n\n  console.log('create that user');\n\n  dispatch({ type: CREATE_USER, payload: response.data });\n}\n\nexport const stanBand = () => async (dispatch, getState) => {\n\n  const currentBandId = getState().bandSearch.selected.bandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [ ...user.stanning, currentBandId];\n\n  const editedUser = { ...user, stanning: stanningArray };\n\n  // dispatch me\n  dispatch(editUser(editedUser, user.id));\n}\n\nexport const unstanBand = () => async (dispatch, getState) => {\n\n  const currentBandId = getState().bandSearch.selected.bandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [ ...user.stanning, currentBandId];\n\n  const editedUser = { ...user, stanning: stanningArray };\n\n  // dispatch me\n  dispatch(editUser(editedUser, user.id));\n\n}\n\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n\n  console.log(response.data);\n  dispatch({ type: EDIT_USER, payload: response.data });\n};\n\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n\n  dispatch({ type: DELETE_USER, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}