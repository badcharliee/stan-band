{"ast":null,"code":"var _jsxFileName = \"/Users/charliewilson/personal/stan-band/client/src/components/bands/SpotifyCallback.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { SpotifyAuthListener } from 'react-spotify-auth';\nimport { fetchCurrentUser, accessTokenReceived, fetchUserByUserId } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SpotifyCallback extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAccessToken = async token => {\n      this.props.accessTokenReceived(token);\n      await this.props.fetchCurrentUser(token); // check if user exists\n      // if user exists, fetch user data\n      // else if user does not exist, create user\n\n      this.props.fetchUserByUserId();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SpotifyAuthListener, {\n        onAccessToken: this.onAccessToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: true\n  };\n};\n\nexport default connect(mapStateToProps, {\n  accessTokenReceived,\n  fetchCurrentUser,\n  fetchUserByUserId\n})(SpotifyCallback);","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/components/bands/SpotifyCallback.js"],"names":["React","connect","SpotifyAuthListener","fetchCurrentUser","accessTokenReceived","fetchUserByUserId","SpotifyCallback","Component","onAccessToken","token","props","render","mapStateToProps","state","isSignedIn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,iBAAhD,QAAyE,eAAzE;;;AAEA,MAAMC,eAAN,SAA8BN,KAAK,CAACO,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAE5CC,aAF4C,GAE5B,MAAMC,KAAN,IAAe;AAC7B,WAAKC,KAAL,CAAWN,mBAAX,CAA+BK,KAA/B;AACA,YAAM,KAAKC,KAAL,CAAWP,gBAAX,CAA4BM,KAA5B,CAAN,CAF6B,CAG7B;AACA;AACA;;AACA,WAAKC,KAAL,CAAWL,iBAAX;AACD,KAT2C;AAAA;;AAW5CM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,mBAAD;AACE,QAAA,aAAa,EAAE,KAAKH;AADtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAnB2C;;AAuB9C,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,UAAU,EAAE;AADP,GAAP;AAGD,CAJD;;AAMA,eAAeb,OAAO,CACpBW,eADoB,EAEpB;AAAER,EAAAA,mBAAF;AAAuBD,EAAAA,gBAAvB;AAAyCE,EAAAA;AAAzC,CAFoB,CAAP,CAGbC,eAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { SpotifyAuthListener } from 'react-spotify-auth';\n\nimport { fetchCurrentUser, accessTokenReceived, fetchUserByUserId } from '../../actions';\n\nclass SpotifyCallback extends React.Component {\n\n  onAccessToken = async token => {\n    this.props.accessTokenReceived(token);\n    await this.props.fetchCurrentUser(token);\n    // check if user exists\n    // if user exists, fetch user data\n    // else if user does not exist, create user\n    this.props.fetchUserByUserId();\n  }\n\n  render() {\n    return (\n      <div>\n        <SpotifyAuthListener\n          onAccessToken={this.onAccessToken}\n        />\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: true\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { accessTokenReceived, fetchCurrentUser, fetchUserByUserId }\n)(SpotifyCallback);\n"]},"metadata":{},"sourceType":"module"}