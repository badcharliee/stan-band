{"ast":null,"code":"import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport { ACCESS_TOKEN_RECEIVED, FETCH_CURRENT_USER, SIGN_OUT, SEARCH_SPOTIFY_VALUE_UPDATE, SEARCH_SPOTIFY, FETCH_FOLLOWING_STATE, FETCH_BANDS, FETCH_BAND_BY_ID, CREATE_BAND, EDIT_BAND, DELETE_BAND, SEARCH_BAND_VALUE_UPDATE, SEARCH_BANDS, FETCH_USERS, FETCH_USER, CREATE_USER, EDIT_USER, DELETE_USER } from './types';\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({\n    type: ACCESS_TOKEN_RECEIVED,\n    payload: token\n  });\n};\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().auth.accessToken\n    }\n  });\n  dispatch({\n    type: FETCH_CURRENT_USER,\n    payload: response.data.id\n  });\n};\nexport const signOut = () => async dispatch => {\n  dispatch({\n    type: SIGN_OUT\n  });\n};\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_SPOTIFY_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchSpotify = searchValue => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().auth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n  dispatch({\n    type: SEARCH_SPOTIFY,\n    payload: searchResponse.data.artists.items\n  });\n  /* check if user is following one or more artists */\n\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n  const isFollowingArray = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().auth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject,\n      isFollowing\n    };\n  });\n  console.log(mergedResponse.data);\n};\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n  dispatch({\n    type: FETCH_BANDS,\n    payload: response.data\n  });\n};\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n  dispatch({\n    type: FETCH_BAND_BY_ID,\n    payload: response.data\n  });\n};\nexport const createBand = band => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await bands.post('/', { ...band,\n    userId\n  });\n  dispatch({\n    type: CREATE_BAND,\n    payload: response.data\n  });\n};\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n  dispatch({\n    type: EDIT_BAND,\n    payload: response.data\n  });\n};\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n  dispatch({\n    type: DELETE_BAND,\n    payload: id\n  });\n};\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_BAND_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchBands = searchValue => async (dispatch, getState) => {\n  /* retrieves band data from native database, then retrieves band photos from spotify */\n  const response = await bands.get(`?name_like=${searchValue}`);\n  dispatch({\n    type: SEARCH_BANDS,\n    payload: response.data\n  });\n  /* use this chunk when searching for new spotify artists */\n  // var responses = await Promise.all(getState().bandSearch.results.map(async result => {\n  //   const bandResponse = await spotify.get(`/artists/${result.bandId}`, {\n  //     headers: {\n  //       Authorization: 'Bearer ' + getState().auth.accessToken\n  //     }\n  //   }).catch((error) => { return null; });\n  //\n  //   return bandResponse;\n  // }));\n  //\n  // responses = responses.filter((response) => { return response !== null });\n};\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n  dispatch({\n    type: FETCH_USER,\n    payload: response.data\n  });\n};\nexport const createUser = user => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await users.post('/', { ...user,\n    userId\n  });\n  dispatch({\n    type: CREATE_USER,\n    payload: response.data\n  });\n};\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n  dispatch({\n    type: EDIT_USER,\n    payload: response.data\n  });\n};\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n  dispatch({\n    type: DELETE_USER,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/actions/index.js"],"names":["spotify","bands","users","ACCESS_TOKEN_RECEIVED","FETCH_CURRENT_USER","SIGN_OUT","SEARCH_SPOTIFY_VALUE_UPDATE","SEARCH_SPOTIFY","FETCH_FOLLOWING_STATE","FETCH_BANDS","FETCH_BAND_BY_ID","CREATE_BAND","EDIT_BAND","DELETE_BAND","SEARCH_BAND_VALUE_UPDATE","SEARCH_BANDS","FETCH_USERS","FETCH_USER","CREATE_USER","EDIT_USER","DELETE_USER","accessTokenReceived","token","dispatch","type","payload","fetchCurrentUser","getState","response","get","headers","Authorization","auth","accessToken","data","id","signOut","searchSpotifyValueUpdate","searchValue","searchSpotify","searchResponse","params","q","limit","artists","items","ids","map","artistObject","idsString","join","isFollowingArray","i","mergedResponse","isFollowing","console","log","fetchBands","fetchBand","createBand","band","userId","post","editBand","put","deleteBand","delete","searchBandValueUpdate","searchBands","fetchUsers","fetchUser","createUser","user","editUser","deleteUser"],"mappings":"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","sourcesContent":["import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport {\n  ACCESS_TOKEN_RECEIVED,\n  FETCH_CURRENT_USER,\n  SIGN_OUT,\n  SEARCH_SPOTIFY_VALUE_UPDATE,\n  SEARCH_SPOTIFY,\n  FETCH_FOLLOWING_STATE,\n  FETCH_BANDS,\n  FETCH_BAND_BY_ID,\n  CREATE_BAND,\n  EDIT_BAND,\n  DELETE_BAND,\n  SEARCH_BAND_VALUE_UPDATE,\n  SEARCH_BANDS,\n  FETCH_USERS,\n  FETCH_USER,\n  CREATE_USER,\n  EDIT_USER,\n  DELETE_USER } from './types';\n\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({ type: ACCESS_TOKEN_RECEIVED, payload: token });\n};\n\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().auth.accessToken\n    }\n  });\n\n  dispatch({ type: FETCH_CURRENT_USER, payload: response.data.id });\n};\n\nexport const signOut = () => async dispatch => {\n  dispatch({ type: SIGN_OUT });\n};\n\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_SPOTIFY_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchSpotify = (searchValue) => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().auth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n\n  dispatch({ type: SEARCH_SPOTIFY, payload: searchResponse.data.artists.items });\n\n  /* check if user is following one or more artists */\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n\n  const isFollowingArray = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().auth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject, isFollowing };\n  });\n\n  console.log(mergedResponse.data);\n}\n\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n\n  dispatch({ type: FETCH_BANDS, payload: response.data });\n}\n\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n\n  dispatch({ type: FETCH_BAND_BY_ID, payload: response.data });\n}\n\nexport const createBand = band => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  const response = await bands.post('/', { ...band, userId });\n\n  dispatch({ type: CREATE_BAND, payload: response.data });\n}\n\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n\n  dispatch({ type: EDIT_BAND, payload: response.data });\n};\n\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n\n  dispatch({ type: DELETE_BAND, payload: id });\n};\n\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_BAND_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchBands = (searchValue) => async (dispatch, getState) => {\n  /* retrieves band data from native database, then retrieves band photos from spotify */\n  const response = await bands.get(`?name_like=${searchValue}`);\n\n  dispatch({ type: SEARCH_BANDS, payload: response.data });\n\n  /* use this chunk when searching for new spotify artists */\n  // var responses = await Promise.all(getState().bandSearch.results.map(async result => {\n  //   const bandResponse = await spotify.get(`/artists/${result.bandId}`, {\n  //     headers: {\n  //       Authorization: 'Bearer ' + getState().auth.accessToken\n  //     }\n  //   }).catch((error) => { return null; });\n  //\n  //   return bandResponse;\n  // }));\n  //\n  // responses = responses.filter((response) => { return response !== null });\n}\n\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n\n  dispatch({ type: FETCH_USERS, payload: response.data });\n}\n\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n\n  dispatch({ type: FETCH_USER, payload: response.data });\n}\n\nexport const createUser = user => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  const response = await users.post('/', { ...user, userId });\n\n  dispatch({ type: CREATE_USER, payload: response.data });\n}\n\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n\n  dispatch({ type: EDIT_USER, payload: response.data });\n};\n\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n\n  dispatch({ type: DELETE_USER, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}