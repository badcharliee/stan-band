{"ast":null,"code":"var _jsxFileName = \"/Users/charliewilson/personal/stan-band/client/src/components/bands/Comment.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport users from '../../apis/users';\nimport { likeComment, unlikeComment } from '../../actions';\nimport '../../styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchImageUrl = async () => {\n      const response = await users.get(`?userId=${this.props.comment.userId}`); // this.setState({ imageUrl: response.data[0].imageUrl });\n\n      if (this.props.currentUser) {\n        // check if currentUser likes comment\n        const comment = this.props.comment;\n\n        try {\n          if (comment.likers.includes(this.props.currentUser.userId)) {\n            console.log('current user likes the comment');\n          } else {\n            console.log('current user does not like the comment');\n          }\n        } catch (error) {}\n\n        this.setState({\n          imageUrl: response.data[0].imageUrl,\n          isLiked: true\n        });\n      } else {\n        this.setState({\n          imageUrl: response.data[0].imageUrl,\n          isLiked: false\n        });\n      }\n    };\n\n    this.onLikeButtonClick = () => {\n      if (this.state.isLiked) {\n        this.props.unlikeComment();\n      } else {\n        this.props.likeComment();\n      }\n\n      this.setState({\n        isLiked: !this.state.isLiked\n      });\n    };\n\n    this.renderLikeIcon = () => {\n      if (!this.state.isLiked) {\n        return /*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: this.onLikeButtonClick,\n          className: \"heart outline icon\",\n          children: [\"   \", this.props.comment.upvotes, \"   \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        onClick: this.onLikeButtonClick,\n        className: \"heart icon\",\n        children: [\"   \", this.props.comment.upvotes, \"   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = {\n      imageUrl: '',\n      isLiked: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchImageUrl();\n  }\n\n  render() {\n    const comment = this.props.comment;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentCardContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentCard\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"profileIcon\",\n          src: this.state.imageUrl,\n          alt: \"Commentor Profile Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"commentTextContent\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentUsername\",\n            children: comment.userId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentBody\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: comment.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentTimestamp\",\n            children: comment.timePosted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"commentLikeIcon\",\n          children: this.renderLikeIcon()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser.user\n  };\n};\n\nexport default connect(mapStateToProps, {\n  likeComment,\n  unlikeComment\n})(Comment);","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/components/bands/Comment.js"],"names":["React","connect","users","likeComment","unlikeComment","Comment","Component","constructor","props","fetchImageUrl","response","get","comment","userId","currentUser","likers","includes","console","log","error","setState","imageUrl","data","isLiked","onLikeButtonClick","state","renderLikeIcon","upvotes","componentDidMount","render","body","timePosted","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport users from '../../apis/users';\nimport { likeComment, unlikeComment } from '../../actions';\nimport '../../styles/styles.css';\n\nclass Comment extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { imageUrl: '', isLiked: false };\n  }\n\n  fetchImageUrl = async () => {\n    const response = await users.get(`?userId=${this.props.comment.userId}`);\n    // this.setState({ imageUrl: response.data[0].imageUrl });\n\n    if (this.props.currentUser) {\n      // check if currentUser likes comment\n\n      const comment = this.props.comment;\n\n      try {\n        if (comment.likers.includes(this.props.currentUser.userId)) {\n          console.log('current user likes the comment');\n        } else {\n          console.log('current user does not like the comment');\n        }\n      } catch (error) {\n\n      }\n\n      this.setState({ imageUrl: response.data[0].imageUrl, isLiked: true });\n    } else {\n      this.setState({ imageUrl: response.data[0].imageUrl, isLiked: false });\n    }\n\n  }\n\n  componentDidMount() {\n    this.fetchImageUrl();\n  }\n\n  onLikeButtonClick = () => {\n\n    if (this.state.isLiked) {\n      this.props.unlikeComment();\n    } else {\n      this.props.likeComment();\n    }\n\n    this.setState({ isLiked: !this.state.isLiked });\n  }\n\n  renderLikeIcon = () => {\n\n    if (!this.state.isLiked) {\n      return (\n        <i onClick={this.onLikeButtonClick} className=\"heart outline icon\">   {this.props.comment.upvotes}   </i>\n      );\n    }\n\n    return (\n      <i onClick={this.onLikeButtonClick} className=\"heart icon\">   {this.props.comment.upvotes}   </i>\n    );\n\n  }\n\n  render() {\n\n    const comment = this.props.comment;\n\n    return (\n\n        <div className=\"commentCardContainer\">\n          <div className=\"commentCard\">\n             <img className=\"profileIcon\" src={this.state.imageUrl} alt=\"Commentor Profile Icon\"/>\n            <div className=\"commentTextContent\">\n              <div className=\"commentUsername\">\n                {comment.userId}\n              </div>\n              <div className=\"commentBody\">\n                <b>{comment.body}</b>\n              </div>\n              <div className=\"commentTimestamp\">\n                {comment.timePosted}\n              </div>\n            </div>\n            <div className=\"commentLikeIcon\">\n              {this.renderLikeIcon()}\n            </div>\n          </div>\n        </div>\n\n\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser.user\n  };\n};\n\nexport default connect(\n  mapStateToProps, {\n    likeComment,\n    unlikeComment\n  }\n)(Comment);\n"]},"metadata":{},"sourceType":"module"}