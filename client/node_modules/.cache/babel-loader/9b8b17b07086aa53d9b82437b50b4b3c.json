{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport { ACCESS_TOKEN_RECEIVED, FETCH_CURRENT_USER, SIGN_OUT, SEARCH_SPOTIFY_VALUE_UPDATE, SEARCH_SPOTIFY, FETCH_BANDS, FETCH_BAND_BY_ID, FETCH_NEW_BANDS, CREATE_BAND, EDIT_BAND, DELETE_BAND, SEARCH_BAND_VALUE_UPDATE, SEARCH_BANDS, BAND_SELECTED, FETCH_USERS, FETCH_USER, FETCH_USER_BY_ID, CREATE_USER, EDIT_USER, DELETE_USER, NEW_COMMENT_CHANGE } from './types';\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({\n    type: ACCESS_TOKEN_RECEIVED,\n    payload: token\n  });\n};\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({\n      type: FETCH_CURRENT_USER,\n      payload: {\n        id: response.data.id,\n        imageUrl: response.data.images[0].url\n      }\n    });\n  } else {\n    dispatch({\n      type: FETCH_CURRENT_USER,\n      payload: {\n        id: response.data.id,\n        imageUrl: null\n      }\n    });\n  }\n};\nexport const signOut = () => async dispatch => {\n  dispatch({\n    type: SIGN_OUT\n  });\n};\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_SPOTIFY_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchSpotify = searchValue => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n  /* check if user is following one or more artists */\n\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject,\n      isFollowing\n    };\n  });\n  dispatch({\n    type: SEARCH_SPOTIFY,\n    payload: mergedResponse\n  });\n};\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n  dispatch({\n    type: FETCH_BANDS,\n    payload: response.data\n  });\n};\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n  dispatch({\n    type: FETCH_BAND_BY_ID,\n    payload: response.data\n  });\n};\nexport const fetchNewBands = () => async dispatch => {\n  const response = await bands.get('?_sort=id&_start=0&_end=4&_order=desc');\n  dispatch({\n    type: FETCH_NEW_BANDS,\n    payload: response.data\n  });\n};\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n  dispatch({\n    type: CREATE_BAND,\n    payload: response.data\n  });\n  dispatch(bandSelected(response.data));\n  dispatch(stanBand());\n};\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n  dispatch({\n    type: EDIT_BAND,\n    payload: response.data\n  });\n};\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n  dispatch({\n    type: DELETE_BAND,\n    payload: id\n  });\n};\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_BAND_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchBands = searchValue => async (dispatch, getState) => {\n  const response = await bands.get(`?name_like=${searchValue}`);\n  dispatch({\n    type: SEARCH_BANDS,\n    payload: response.data\n  });\n};\nexport const bandSelected = band => dispatch => {\n  dispatch({\n    type: BAND_SELECTED,\n    payload: band\n  });\n};\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n  dispatch({\n    type: FETCH_USER,\n    payload: response.data\n  });\n};\nexport const newCommentChange = commentValue => async dispatch => {\n  dispatch({\n    type: NEW_COMMENT_CHANGE,\n    payload: commentValue\n  });\n};\nexport const likeComment = comment => async (dispatch, getState) => {\n  const userId = getState().currentUser.user.userId;\n  const commentLikers = [...comment.likers, userId];\n  const editedComment = { ...comment,\n    likers: commentLikers\n  };\n  const filteredComments = getState().bandSearch.selected.comments.filter(cmt => cmt.uuid !== comment.uuid);\n  const editedComments = [editedComment, ...filteredComments];\n  const bandId = getState().bandSearch.selected.id;\n  const band = { ...getState().bandSearch.selected,\n    comments: editedComments\n  };\n  dispatch(editBand(band, bandId));\n};\nexport const unlikeComment = comment => async (dispatch, getState) => {\n  const userId = getState().currentUser.user.userId;\n  const commentLikers = comment.likers.filter(liker => liker !== userId);\n  const editedComment = { ...comment,\n    likers: commentLikers\n  };\n  const filteredComments = getState().bandSearch.selected.comments.filter(cmt => cmt.uuid !== comment.uuid);\n  const editedComments = [editedComment, ...filteredComments];\n  const bandId = getState().bandSearch.selected.id;\n  const band = { ...getState().bandSearch.selected,\n    comments: editedComments\n  };\n  dispatch(editBand(band, bandId));\n};\nexport const addNewComment = () => async (dispatch, getState) => {\n  const commentValue = getState().bandSearch.newComment; // validate commentValue\n\n  if (!commentValue || commentValue === \"\") {\n    console.log('cannot upload an empty or null comment!');\n    return;\n  }\n\n  const currentUser = getState().currentUser.user;\n\n  if (!currentUser) {\n    console.log('there is no user logged in!');\n    return;\n  } // construct band comment object\n\n\n  const uuid = uuidv4();\n  const timePosted = new Date().toUTCString();\n  const spotifyUserId = currentUser.userId;\n  const body = commentValue;\n  const bandComment = {\n    \"uuid\": uuid,\n    \"timePosted\": timePosted,\n    \"userId\": spotifyUserId,\n    \"body\": body,\n    \"likers\": [spotifyUserId]\n  }; // add comment object to band\n\n  const bandId = getState().bandSearch.selected.id;\n  const bandComments = [...getState().bandSearch.selected.comments, bandComment];\n  const band = { ...getState().bandSearch.selected,\n    comments: bandComments\n  };\n  dispatch(editBand(band, bandId)); // construct user comment object\n\n  const spotifyBandId = getState().bandSearch.selected.spotifyBandId;\n  const userComment = {\n    \"uuid\": uuid,\n    \"timePosted\": timePosted,\n    \"bandId\": spotifyBandId,\n    \"body\": body\n  }; // add comment object to user\n\n  const userId = currentUser.id;\n  const userComments = [...currentUser.comments, userComment];\n  const user = { ...currentUser,\n    comments: userComments\n  };\n  dispatch(editUser(user, userId)); // update redux store with response\n\n  dispatch(newCommentChange(null));\n};\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\n\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const {\n    userId,\n    imageUrl\n  } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`); // if user exists\n\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({\n      type: FETCH_USER_BY_ID,\n      payload: response.data[0]\n    });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({\n      imageUrl,\n      stanning: [],\n      comments: []\n    }));\n  }\n};\nexport const createUser = user => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user,\n    userId\n  });\n  console.log('create that user');\n  dispatch({\n    type: CREATE_USER,\n    payload: response.data\n  });\n};\nexport const stanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [...user.stanning, currentBandId];\n  const editedUser = { ...user,\n    stanning: stanningArray\n  };\n  dispatch(editUser(editedUser, user.id));\n  const bandStans = [...getState().bandSearch.selected.stans, user.userId];\n  const editedBand = { ...getState().bandSearch.selected,\n    stans: bandStans\n  };\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n};\nexport const unstanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = user.stanning.filter(o => o !== currentBandId);\n  const editedUser = { ...user,\n    stanning: stanningArray\n  };\n  dispatch(editUser(editedUser, user.id));\n  const bandStans = getState().bandSearch.selected.stans.filter(o => o !== user.userId);\n  const editedBand = { ...getState().bandSearch.selected,\n    stans: bandStans\n  };\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n};\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n  dispatch({\n    type: EDIT_USER,\n    payload: response.data\n  });\n};\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n  dispatch({\n    type: DELETE_USER,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/actions/index.js"],"names":["v4","uuidv4","spotify","bands","users","ACCESS_TOKEN_RECEIVED","FETCH_CURRENT_USER","SIGN_OUT","SEARCH_SPOTIFY_VALUE_UPDATE","SEARCH_SPOTIFY","FETCH_BANDS","FETCH_BAND_BY_ID","FETCH_NEW_BANDS","CREATE_BAND","EDIT_BAND","DELETE_BAND","SEARCH_BAND_VALUE_UPDATE","SEARCH_BANDS","BAND_SELECTED","FETCH_USERS","FETCH_USER","FETCH_USER_BY_ID","CREATE_USER","EDIT_USER","DELETE_USER","NEW_COMMENT_CHANGE","accessTokenReceived","token","dispatch","type","payload","fetchCurrentUser","getState","response","get","headers","Authorization","spotifyAuth","accessToken","data","images","length","id","imageUrl","url","signOut","searchSpotifyValueUpdate","searchValue","searchSpotify","searchResponse","params","q","limit","ids","artists","items","map","artistObject","idsString","join","followingResponse","isFollowingArray","i","mergedResponse","isFollowing","fetchBands","fetchBand","fetchNewBands","createBand","band","post","bandSelected","stanBand","editBand","put","deleteBand","delete","searchBandValueUpdate","searchBands","fetchUsers","fetchUser","newCommentChange","commentValue","likeComment","comment","userId","currentUser","user","commentLikers","likers","editedComment","filteredComments","bandSearch","selected","comments","filter","cmt","uuid","editedComments","bandId","unlikeComment","liker","addNewComment","newComment","console","log","timePosted","Date","toUTCString","spotifyUserId","body","bandComment","bandComments","spotifyBandId","userComment","userComments","editUser","fetchUserByUserId","createUser","stanning","currentBandId","stanningArray","editedUser","bandStans","stans","editedBand","unstanBand","o","deleteUser"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport {\n  ACCESS_TOKEN_RECEIVED,\n  FETCH_CURRENT_USER,\n  SIGN_OUT,\n  SEARCH_SPOTIFY_VALUE_UPDATE,\n  SEARCH_SPOTIFY,\n  FETCH_BANDS,\n  FETCH_BAND_BY_ID,\n  FETCH_NEW_BANDS,\n  CREATE_BAND,\n  EDIT_BAND,\n  DELETE_BAND,\n  SEARCH_BAND_VALUE_UPDATE,\n  SEARCH_BANDS,\n  BAND_SELECTED,\n  FETCH_USERS,\n  FETCH_USER,\n  FETCH_USER_BY_ID,\n  CREATE_USER,\n  EDIT_USER,\n  DELETE_USER,\n  NEW_COMMENT_CHANGE\n} from './types';\n\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({ type: ACCESS_TOKEN_RECEIVED, payload: token });\n};\n\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: response.data.images[0].url } });\n  } else {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: null } });\n  }\n\n};\n\nexport const signOut = () => async dispatch => {\n  dispatch({ type: SIGN_OUT });\n};\n\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_SPOTIFY_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchSpotify = (searchValue) => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n\n  /* check if user is following one or more artists */\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject, isFollowing };\n  });\n\n  dispatch({ type: SEARCH_SPOTIFY, payload: mergedResponse });\n}\n\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n\n  dispatch({ type: FETCH_BANDS, payload: response.data });\n}\n\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n\n  dispatch({ type: FETCH_BAND_BY_ID, payload: response.data });\n}\n\nexport const fetchNewBands = () => async dispatch => {\n  const response = await bands.get('?_sort=id&_start=0&_end=4&_order=desc');\n\n  dispatch({ type: FETCH_NEW_BANDS, payload: response.data });\n}\n\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n\n  dispatch({ type: CREATE_BAND, payload: response.data });\n  dispatch(bandSelected(response.data));\n  dispatch(stanBand());\n}\n\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n\n  dispatch({ type: EDIT_BAND, payload: response.data });\n};\n\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n\n  dispatch({ type: DELETE_BAND, payload: id });\n};\n\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_BAND_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchBands = (searchValue) => async (dispatch, getState) => {\n  const response = await bands.get(`?name_like=${searchValue}`);\n\n  dispatch({ type: SEARCH_BANDS, payload: response.data });\n}\n\nexport const bandSelected = band => dispatch => {\n  dispatch({ type: BAND_SELECTED, payload: band });\n}\n\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n\n  dispatch({ type: FETCH_USERS, payload: response.data });\n}\n\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n\n  dispatch({ type: FETCH_USER, payload: response.data });\n}\n\nexport const newCommentChange = (commentValue) => async dispatch => {\n  dispatch({ type: NEW_COMMENT_CHANGE, payload: commentValue });\n}\n\nexport const likeComment = comment => async (dispatch, getState) => {\n  const userId = getState().currentUser.user.userId;\n  const commentLikers = [ ...comment.likers, userId ];\n  const editedComment = { ...comment, likers: commentLikers };\n\n  const filteredComments = getState().bandSearch.selected.comments.filter(cmt => cmt.uuid !== comment.uuid);\n  const editedComments = [ editedComment, ...filteredComments ];\n\n  const bandId = getState().bandSearch.selected.id;\n  const band = { ...getState().bandSearch.selected, comments: editedComments };\n  dispatch(editBand(band, bandId));\n}\n\nexport const unlikeComment = comment => async (dispatch, getState) => {\n  const userId = getState().currentUser.user.userId;\n  const commentLikers = comment.likers.filter(liker => liker !== userId);\n  const editedComment = { ...comment, likers: commentLikers };\n\n  const filteredComments = getState().bandSearch.selected.comments.filter(cmt => cmt.uuid !== comment.uuid);\n  const editedComments = [ editedComment, ...filteredComments ];\n\n  const bandId = getState().bandSearch.selected.id;\n  const band = { ...getState().bandSearch.selected, comments: editedComments };\n  dispatch(editBand(band, bandId));\n}\n\nexport const addNewComment = () => async (dispatch, getState) => {\n\n  const commentValue = getState().bandSearch.newComment;\n\n  // validate commentValue\n  if (!commentValue || commentValue === \"\") {\n    console.log('cannot upload an empty or null comment!');\n    return;\n  }\n\n  const currentUser = getState().currentUser.user;\n\n  if (!currentUser) {\n    console.log('there is no user logged in!');\n    return;\n  }\n  // construct band comment object\n  const uuid = uuidv4();\n  const timePosted = new Date().toUTCString();\n  const spotifyUserId = currentUser.userId;\n  const body = commentValue;\n\n  const bandComment = {\n    \"uuid\": uuid,\n    \"timePosted\": timePosted,\n    \"userId\": spotifyUserId,\n    \"body\": body,\n    \"likers\": [ spotifyUserId ]\n  };\n\n  // add comment object to band\n  const bandId = getState().bandSearch.selected.id;\n  const bandComments = [ ...getState().bandSearch.selected.comments, bandComment ];\n  const band = { ...getState().bandSearch.selected, comments: bandComments };\n  dispatch(editBand(band, bandId));\n\n  // construct user comment object\n  const spotifyBandId = getState().bandSearch.selected.spotifyBandId;\n\n  const userComment = {\n    \"uuid\": uuid,\n    \"timePosted\": timePosted,\n    \"bandId\": spotifyBandId,\n    \"body\": body\n  };\n\n  // add comment object to user\n  const userId = currentUser.id;\n  const userComments = [ ...currentUser.comments, userComment ];\n  const user = { ...currentUser, comments: userComments };\n  dispatch(editUser(user, userId));\n  // update redux store with response\n  dispatch(newCommentChange(null));\n}\n\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const { userId, imageUrl } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`);\n\n  // if user exists\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({ type: FETCH_USER_BY_ID, payload: response.data[0] });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({ imageUrl, stanning: [], comments: [] }));\n  }\n\n}\n\nexport const createUser = user => async (dispatch, getState) => {\n  const { userId } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user, userId });\n\n  console.log('create that user');\n\n  dispatch({ type: CREATE_USER, payload: response.data });\n}\n\nexport const stanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [ ...user.stanning, currentBandId];\n  const editedUser = { ...user, stanning: stanningArray };\n\n  dispatch(editUser(editedUser, user.id));\n\n  const bandStans = [ ...getState().bandSearch.selected.stans, user.userId ];\n  const editedBand = { ...getState().bandSearch.selected, stans: bandStans };\n\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n}\n\nexport const unstanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = user.stanning.filter(o => o !== currentBandId);\n  const editedUser = { ...user, stanning: stanningArray };\n\n  dispatch(editUser(editedUser, user.id));\n\n  const bandStans = getState().bandSearch.selected.stans.filter(o => o !== user.userId);\n  const editedBand = { ...getState().bandSearch.selected, stans: bandStans };\n\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n}\n\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n\n  dispatch({ type: EDIT_USER, payload: response.data });\n};\n\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n\n  dispatch({ type: DELETE_USER, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}