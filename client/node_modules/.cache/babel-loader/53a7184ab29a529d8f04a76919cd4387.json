{"ast":null,"code":"import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport { ACCESS_TOKEN_RECEIVED, FETCH_CURRENT_USER, SIGN_OUT, SEARCH_SPOTIFY_VALUE_UPDATE, SEARCH_SPOTIFY, FETCH_BANDS, FETCH_BAND_BY_ID, CREATE_BAND, EDIT_BAND, DELETE_BAND, SEARCH_BAND_VALUE_UPDATE, SEARCH_BANDS, BAND_SELECTED, FETCH_USERS, FETCH_USER, FETCH_USER_BY_ID, CREATE_USER, EDIT_USER, DELETE_USER, NEW_COMMENT_CHANGE, LIKE_COMMENT, UNLIKE_COMMENT } from './types';\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({\n    type: ACCESS_TOKEN_RECEIVED,\n    payload: token\n  });\n};\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({\n      type: FETCH_CURRENT_USER,\n      payload: {\n        id: response.data.id,\n        imageUrl: response.data.images[0].url\n      }\n    });\n  } else {\n    dispatch({\n      type: FETCH_CURRENT_USER,\n      payload: {\n        id: response.data.id,\n        imageUrl: null\n      }\n    });\n  }\n};\nexport const signOut = () => async dispatch => {\n  dispatch({\n    type: SIGN_OUT\n  });\n};\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_SPOTIFY_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchSpotify = searchValue => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n  /* check if user is following one or more artists */\n\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject,\n      isFollowing\n    };\n  });\n  dispatch({\n    type: SEARCH_SPOTIFY,\n    payload: mergedResponse\n  });\n};\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n  dispatch({\n    type: FETCH_BANDS,\n    payload: response.data\n  });\n};\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n  dispatch({\n    type: FETCH_BAND_BY_ID,\n    payload: response.data\n  });\n};\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n  dispatch({\n    type: CREATE_BAND,\n    payload: response.data\n  });\n  dispatch(bandSelected(response.data));\n  dispatch(stanBand());\n};\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n  dispatch({\n    type: EDIT_BAND,\n    payload: response.data\n  });\n};\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n  dispatch({\n    type: DELETE_BAND,\n    payload: id\n  });\n};\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({\n    type: SEARCH_BAND_VALUE_UPDATE,\n    payload: searchValue\n  });\n};\nexport const searchBands = searchValue => async (dispatch, getState) => {\n  const response = await bands.get(`?name_like=${searchValue}`);\n  dispatch({\n    type: SEARCH_BANDS,\n    payload: response.data\n  });\n};\nexport const bandSelected = band => dispatch => {\n  dispatch({\n    type: BAND_SELECTED,\n    payload: band\n  });\n};\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n  dispatch({\n    type: FETCH_USER,\n    payload: response.data\n  });\n};\nexport const newCommentChange = commentValue => async dispatch => {\n  dispatch({\n    type: NEW_COMMENT_CHANGE,\n    payload: commentValue\n  });\n};\nexport const addNewComment = () => async (dispatch, getState) => {\n  const commentValue = getState().bandSearch.newComment; // validate commentValue\n\n  if (!commentValue || commentValue === \"\") {\n    console.log('cannot upload an empty or null comment!');\n    return;\n  }\n\n  const currentUser = getState().currentUser.user;\n\n  if (!currentUser) {\n    console.log('there is no user logged in!');\n    return;\n  } // construct band comment object\n\n\n  const timePosted = new Date().toUTCString();\n  const spotifyUserId = currentUser.userId;\n  const upvotes = 1;\n  const downvotes = 0;\n  const body = commentValue;\n  const bandComment = {\n    \"timePosted\": timePosted,\n    \"userId\": spotifyUserId,\n    \"upvotes\": upvotes,\n    \"downvotes\": downvotes,\n    \"body\": body\n  }; // add comment object to band\n\n  const bandId = getState().bandSearch.selected.id;\n  const bandComments = [...getState().bandSearch.selected.comments, bandComment];\n  const band = { ...getState().bandSearch.selected,\n    comments: bandComments\n  };\n  dispatch(editBand(band, bandId)); // construct user comment object\n\n  const spotifyBandId = getState().bandSearch.selected.spotifyBandId;\n  const userComment = {\n    \"timePosted\": timePosted,\n    \"bandId\": spotifyBandId,\n    \"upvotes\": upvotes,\n    \"downvotes\": downvotes,\n    \"body\": body\n  }; // add comment object to user\n\n  const userId = currentUser.id;\n  const userComments = [...currentUser.comments, userComment];\n  const user = { ...currentUser,\n    comments: userComments\n  };\n  dispatch(editUser(user, userId)); // update redux store with response\n\n  dispatch(newCommentChange(null));\n};\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\n\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const {\n    userId,\n    imageUrl\n  } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`); // if user exists\n\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({\n      type: FETCH_USER_BY_ID,\n      payload: response.data[0]\n    });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({\n      imageUrl,\n      stanning: [],\n      comments: []\n    }));\n  }\n};\nexport const createUser = user => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user,\n    userId\n  });\n  console.log('create that user');\n  dispatch({\n    type: CREATE_USER,\n    payload: response.data\n  });\n};\nexport const stanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [...user.stanning, currentBandId];\n  const editedUser = { ...user,\n    stanning: stanningArray\n  };\n  dispatch(editUser(editedUser, user.id));\n  const bandStans = [...getState().bandSearch.selected.stans, user.userId];\n  const editedBand = { ...getState().bandSearch.selected,\n    stans: bandStans\n  };\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n};\nexport const unstanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = user.stanning.filter(o => o !== currentBandId);\n  const editedUser = { ...user,\n    stanning: stanningArray\n  };\n  dispatch(editUser(editedUser, user.id));\n  const bandStans = getState().bandSearch.selected.stans.filter(o => o !== user.userId);\n  const editedBand = { ...getState().bandSearch.selected,\n    stans: bandStans\n  };\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n};\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n  dispatch({\n    type: EDIT_USER,\n    payload: response.data\n  });\n};\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n  dispatch({\n    type: DELETE_USER,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/charliewilson/personal/stan-band/client/src/actions/index.js"],"names":["spotify","bands","users","ACCESS_TOKEN_RECEIVED","FETCH_CURRENT_USER","SIGN_OUT","SEARCH_SPOTIFY_VALUE_UPDATE","SEARCH_SPOTIFY","FETCH_BANDS","FETCH_BAND_BY_ID","CREATE_BAND","EDIT_BAND","DELETE_BAND","SEARCH_BAND_VALUE_UPDATE","SEARCH_BANDS","BAND_SELECTED","FETCH_USERS","FETCH_USER","FETCH_USER_BY_ID","CREATE_USER","EDIT_USER","DELETE_USER","NEW_COMMENT_CHANGE","LIKE_COMMENT","UNLIKE_COMMENT","accessTokenReceived","token","dispatch","type","payload","fetchCurrentUser","getState","response","get","headers","Authorization","spotifyAuth","accessToken","data","images","length","id","imageUrl","url","signOut","searchSpotifyValueUpdate","searchValue","searchSpotify","searchResponse","params","q","limit","ids","artists","items","map","artistObject","idsString","join","followingResponse","isFollowingArray","i","mergedResponse","isFollowing","fetchBands","fetchBand","createBand","band","post","bandSelected","stanBand","editBand","put","deleteBand","delete","searchBandValueUpdate","searchBands","fetchUsers","fetchUser","newCommentChange","commentValue","addNewComment","bandSearch","newComment","console","log","currentUser","user","timePosted","Date","toUTCString","spotifyUserId","userId","upvotes","downvotes","body","bandComment","bandId","selected","bandComments","comments","spotifyBandId","userComment","userComments","editUser","fetchUserByUserId","createUser","stanning","currentBandId","stanningArray","editedUser","bandStans","stans","editedBand","unstanBand","filter","o","deleteUser"],"mappings":"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","sourcesContent":["import spotify from '../apis/spotify';\nimport bands from '../apis/bands';\nimport users from '../apis/users';\nimport {\n  ACCESS_TOKEN_RECEIVED,\n  FETCH_CURRENT_USER,\n  SIGN_OUT,\n  SEARCH_SPOTIFY_VALUE_UPDATE,\n  SEARCH_SPOTIFY,\n  FETCH_BANDS,\n  FETCH_BAND_BY_ID,\n  CREATE_BAND,\n  EDIT_BAND,\n  DELETE_BAND,\n  SEARCH_BAND_VALUE_UPDATE,\n  SEARCH_BANDS,\n  BAND_SELECTED,\n  FETCH_USERS,\n  FETCH_USER,\n  FETCH_USER_BY_ID,\n  CREATE_USER,\n  EDIT_USER,\n  DELETE_USER,\n  NEW_COMMENT_CHANGE,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT\n} from './types';\n\n/* spotify api action creators */\n\nexport const accessTokenReceived = token => async dispatch => {\n  dispatch({ type: ACCESS_TOKEN_RECEIVED, payload: token });\n};\n\nexport const fetchCurrentUser = () => async (dispatch, getState) => {\n  const response = await spotify.get('/me', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    }\n  });\n\n  if (response.data.images.length > 0) {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: response.data.images[0].url } });\n  } else {\n    dispatch({ type: FETCH_CURRENT_USER, payload: { id: response.data.id, imageUrl: null } });\n  }\n\n};\n\nexport const signOut = () => async dispatch => {\n  dispatch({ type: SIGN_OUT });\n};\n\nexport const searchSpotifyValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_SPOTIFY_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchSpotify = (searchValue) => async (dispatch, getState) => {\n  /* get artists that were searched */\n  const searchResponse = await spotify.get('search', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      q: searchValue,\n      type: 'artist',\n      limit: '50'\n    }\n  });\n\n  /* check if user is following one or more artists */\n  const ids = searchResponse.data.artists.items.map(artistObject => {\n    return artistObject.id;\n  });\n  const idsString = ids.join();\n\n  const followingResponse = await spotify.get('/me/following/contains', {\n    headers: {\n      Authorization: 'Bearer ' + getState().spotifyAuth.accessToken\n    },\n    params: {\n      type: 'artist',\n      ids: idsString\n    }\n  });\n  const isFollowingArray = followingResponse.data;\n\n  var i = 0;\n  const mergedResponse = searchResponse.data.artists.items.map(artistObject => {\n    const isFollowing = isFollowingArray[i];\n    i += 1;\n    return { ...artistObject, isFollowing };\n  });\n\n  dispatch({ type: SEARCH_SPOTIFY, payload: mergedResponse });\n}\n\n/* bands api action creators */\n\nexport const fetchBands = () => async dispatch => {\n  const response = await bands.get('/');\n\n  dispatch({ type: FETCH_BANDS, payload: response.data });\n}\n\nexport const fetchBand = id => async dispatch => {\n  const response = await bands.get(`/${id}`);\n\n  dispatch({ type: FETCH_BAND_BY_ID, payload: response.data });\n}\n\nexport const createBand = band => async (dispatch, getState) => {\n  // const { userId } = getState().auth;\n  const response = await bands.post('', band);\n\n  dispatch({ type: CREATE_BAND, payload: response.data });\n  dispatch(bandSelected(response.data));\n  dispatch(stanBand());\n}\n\nexport const editBand = (band, id) => async dispatch => {\n  const response = await bands.put(`/${id}`, band);\n\n  dispatch({ type: EDIT_BAND, payload: response.data });\n};\n\nexport const deleteBand = id => async dispatch => {\n  await bands.delete(`/${id}`);\n\n  dispatch({ type: DELETE_BAND, payload: id });\n};\n\nexport const searchBandValueUpdate = searchValue => async dispatch => {\n  dispatch({ type: SEARCH_BAND_VALUE_UPDATE, payload: searchValue });\n}\n\nexport const searchBands = (searchValue) => async (dispatch, getState) => {\n  const response = await bands.get(`?name_like=${searchValue}`);\n\n  dispatch({ type: SEARCH_BANDS, payload: response.data });\n}\n\nexport const bandSelected = band => dispatch => {\n  dispatch({ type: BAND_SELECTED, payload: band });\n}\n\n/* users api action creators */\n\nexport const fetchUsers = () => async dispatch => {\n  const response = await users.get('/');\n\n  dispatch({ type: FETCH_USERS, payload: response.data });\n}\n\nexport const fetchUser = id => async dispatch => {\n  const response = await users.get(`/${id}`);\n\n  dispatch({ type: FETCH_USER, payload: response.data });\n}\n\nexport const newCommentChange = (commentValue) => async dispatch => {\n  dispatch({ type: NEW_COMMENT_CHANGE, payload: commentValue });\n}\n\nexport const addNewComment = () => async (dispatch, getState) => {\n\n  const commentValue = getState().bandSearch.newComment;\n\n  // validate commentValue\n  if (!commentValue || commentValue === \"\") {\n    console.log('cannot upload an empty or null comment!');\n    return;\n  }\n\n  const currentUser = getState().currentUser.user;\n\n  if (!currentUser) {\n    console.log('there is no user logged in!');\n    return;\n  }\n  // construct band comment object\n  const timePosted = new Date().toUTCString();\n  const spotifyUserId = currentUser.userId;\n  const upvotes = 1;\n  const downvotes = 0;\n  const body = commentValue;\n\n  const bandComment = {\n    \"timePosted\": timePosted,\n    \"userId\": spotifyUserId,\n    \"upvotes\": upvotes,\n    \"downvotes\": downvotes,\n    \"body\": body\n  };\n\n  // add comment object to band\n  const bandId = getState().bandSearch.selected.id;\n  const bandComments = [ ...getState().bandSearch.selected.comments, bandComment ];\n  const band = { ...getState().bandSearch.selected, comments: bandComments };\n  dispatch(editBand(band, bandId));\n\n  // construct user comment object\n  const spotifyBandId = getState().bandSearch.selected.spotifyBandId;\n\n  const userComment = {\n    \"timePosted\": timePosted,\n    \"bandId\": spotifyBandId,\n    \"upvotes\": upvotes,\n    \"downvotes\": downvotes,\n    \"body\": body\n  };\n\n  // add comment object to user\n  const userId = currentUser.id;\n  const userComments = [ ...currentUser.comments, userComment ];\n  const user = { ...currentUser, comments: userComments };\n  dispatch(editUser(user, userId));\n  // update redux store with response\n  dispatch(newCommentChange(null));\n}\n\n/*\n  check if user exists --\n  if user exists, fetch user data --\n  else if user does not exist, create user\n*/\nexport const fetchUserByUserId = () => async (dispatch, getState) => {\n  const { userId, imageUrl } = getState().spotifyAuth;\n  const response = await users.get(`?userId=${userId}`);\n\n  // if user exists\n  if (response.data.length > 0) {\n    console.log('user exists.');\n    dispatch({ type: FETCH_USER_BY_ID, payload: response.data[0] });\n  } else {\n    // user does not exist... add them to the database\n    console.log('user does not exist... create user');\n    dispatch(createUser({ imageUrl, stanning: [], comments: [] }));\n  }\n\n}\n\nexport const createUser = user => async (dispatch, getState) => {\n  const { userId } = getState().spotifyAuth;\n  const response = await users.post('/', { ...user, userId });\n\n  console.log('create that user');\n\n  dispatch({ type: CREATE_USER, payload: response.data });\n}\n\nexport const stanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = [ ...user.stanning, currentBandId];\n  const editedUser = { ...user, stanning: stanningArray };\n\n  dispatch(editUser(editedUser, user.id));\n\n  const bandStans = [ ...getState().bandSearch.selected.stans, user.userId ];\n  const editedBand = { ...getState().bandSearch.selected, stans: bandStans };\n\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n}\n\nexport const unstanBand = () => async (dispatch, getState) => {\n  const currentBandId = getState().bandSearch.selected.spotifyBandId;\n  const user = getState().currentUser.user;\n  const stanningArray = user.stanning.filter(o => o !== currentBandId);\n  const editedUser = { ...user, stanning: stanningArray };\n\n  dispatch(editUser(editedUser, user.id));\n\n  const bandStans = getState().bandSearch.selected.stans.filter(o => o !== user.userId);\n  const editedBand = { ...getState().bandSearch.selected, stans: bandStans };\n\n  dispatch(editBand(editedBand, getState().bandSearch.selected.id));\n}\n\nexport const editUser = (user, id) => async dispatch => {\n  const response = await users.put(`/${id}`, user);\n\n  dispatch({ type: EDIT_USER, payload: response.data });\n};\n\nexport const deleteUser = id => async dispatch => {\n  await users.delete(`/${id}`);\n\n  dispatch({ type: DELETE_USER, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}